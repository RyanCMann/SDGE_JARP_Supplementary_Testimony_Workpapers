?melt
??melt
?reshape2
?reshape
library(reshape2)
package_version("reshape2")
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
readRDS(file.choose())
raw <- readRDS(file.choose())
View(raw)
meter <- raw[,.(dttm,demand)]
library(e.verse)
meter <- raw[,.(dttm,demand)]
View(meter)
class(meter$demand)
class(meter$dttm)
saveRDS(meter, "Meter 30 Clean Columns.rds")
getwd()
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
shiny::runApp('Desktop/EnerNOC Git Repositories/mercury2.0')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
install.packages("rJava")
install.packages('rJava', type = 'source')
library(e.verse)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
library(e.verse)
View(bess_format)
NA
is.na(NA)
is.na(N/A)
is.na(<NA>)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
Sys.getenv()
javareconf
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home")
Sys.getenv()
Sys.setenv(PATH = "/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin")
Sys.getenv()
library(rJava)
.jinit()
Sys.getenv()
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
rep(NA_real_, 3)
list(return(rep(NA_real_, 3)))
list(return(rep(NA_real_, 3))
list(rep(NA_real_, 3))
list(NA_real_,NA_real_,NA_real_)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
renv::status()
install.packages("renv")
library(renv)
renv::status()
library(shiny)
?sliderInput
View(sliderInput)
20-1/5
(20-1)/5
Raw_LMP <- readRDS(file.choose())
View(Raw_LMP)
library(tidyverse)
library(lubridate)
LMP_Hourly <- Raw_LMP %>%
mutate(Hour = hour(dttm))
View(LMP_Hourly)
LMP_Hourly <- Raw_LMP %>%
mutate(Hour = hour(dttm)) %>%
group_by(Hour) %>%
summarize(Ave_MOER = mean(moer))
View(LMP_Hourly)
ggplot(LMP_Hourly, aes(x = Hour, y = Ave_MOER)) +
geom_line() +
xlab("Hour of Day (Hour Beginning)") +
ylab("Average MOER") +
ggtitle("Average Hourly MOER") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = seq(0, 23)) + coord_cartesian(xlim = c(0,23))
ggplot(LMP_Hourly, aes(x = Hour, y = Ave_MOER)) +
geom_line() +
xlab("Hour of Day (Hour Beginning)") +
ylab("Average MOER (kg/kWh)") +
ggtitle("Average Hourly MOER") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = seq(0, 23)) + coord_cartesian(xlim = c(0,23))
ggsave("Average Hourly MOER.png", width = 11, height = 8.5, units = "in")
getwd()
e.verse::install_everse(ref="dev",depend=F)
model <- readRDS(file.choose())
View(model)
performance <- model$model$`1`$performance
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?elf::sys_time
?elf::sys_clock
View(elf::sys_clock())
View(elf::sys_clock
)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
sku <- data.table(vendor = "tesla", energy = as.kwh(sapply(x,"[[", 1), hrs = 0), power = as.kw(sapply(x,"[[",2)))
View(fullPqtData$module)
1984/523
sku <- data.table(vendor = "tesla", energy = 1000, power = 500)
View(sku)
fullPqtData$module[vendor = "sungrow"]
fullPqtData$module[vendor == "sungrow"]
fullPqtData$module[vendor == "sungrow",ess_module_kwh]
fullPqtData$module[vendor == "nec",ess_module_kwh]
?%%
10 %% 5
5 %% 10
sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh]
sku$energy
15 %% 5
1300 %% 1000
class(fullPqtData$module[vendor == "nec",ess_module_kwh])
test <- fullPqtData$module[vendor == "nec",ess_module_kwh]
test
1000 %% 1300
1300 %% 1000
1000 %% 2440
sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0
any(sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0)
View(fullPqtData$module)
runApp('Desktop/EnerNOC Git Repositories/artemis')
View(sku)
sku[any(sku$energy %% fullPqtData$module[vendor == "sungrow",ess_module_kwh] == 0) & any(sku$power %% fullPqtData$module[vendor == "sungrow",ess_module_kw] == 0), vendor := "sungrow"]
sku[any(sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0) & any(sku$power %% fullPqtData$module[vendor == "nec",ess_module_kw] == 0), vendor := "nec"]
sku[any(energy %% fullPqtData$module[vendor == "sungrow",ess_module_kwh] == 0) & any(power %% fullPqtData$module[vendor == "sungrow",ess_module_kw] == 0), vendor := "sungrow"]
sku[any(energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0) & any(power %% fullPqtData$module[vendor == "nec",ess_module_kw] == 0), vendor := "nec"]
runApp('Desktop/EnerNOC Git Repositories/artemis')
assign(“sku”, sku, globalenv())
assign("sku", sku, globalenv())
skutest <- copy(sku)
View(sku)
sku[any(energy %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
sku$energy %% fullPqtData$module[vendor == "sungrow", ess_module_kwh]
sku$energy
as.numeric(sku$energy)
sku[, sungrowEnergyMatch := any(as.numeric(energy) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
fullPqtData$module[vendor == "sungrow", ess_module_kwh]
as.numeric(sku[skuRow,energy])
skuRow <- 1
as.numeric(sku[skuRow,energy])
as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)
as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
View(sku)
any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)
sku[, .(sungrowEnergyMatch, sungrowPowerMatch, necEnergyMatch, necPowerMatch) := NA]
sku[, .(sungrowEnergyMatch := NA, sungrowPowerMatch := NA, necEnergyMatch := NA, necPowerMatch := NA)]
sku[, c("sungrowEnergyMatch" := NA, "sungrowPowerMatch" := NA, "necEnergyMatch" := NA, "necPowerMatch" := NA)]
View(sku)
sku[, c("sungrowEnergyMatch", "sungrowPowerMatch", "necEnergyMatch", "necPowerMatch") := NA]
View(sku)
skuRow
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
View(sku)
sku[skuRow, sungrowPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "sungrow", ess_module_kw] == 0)]
sku[skuRow, necEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "nec", ess_module_kwh] == 0)]
sku[skuRow, necPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0)]
View(sku)
for(skuRow in 1:nrow(sku)){
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
sku[skuRow, sungrowPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "sungrow", ess_module_kw] == 0)]
sku[skuRow, necEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "nec", ess_module_kwh] == 0)]
sku[skuRow, necPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0)]
}
View(sku)
sku[sungrowEnergyMatch & sungrowPowerMatch, vendor := "sungrow"]
View(sku)
sku[necEnergyMatch & necPowerMatch, vendor := "nec"]
View(sku)
skuRow
sku[skuRow,power]
sku[skuRow,power] %% fullPqtData$module[vendor == "nec", ess_module_kw]
sku[skuRow,power] %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0
runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
assign("sku", sku, globalenv())
View(sku)
runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
pvwatts_loc(37, -121)
pvwatts_loc(lat=37, lng=-121)
library(e.meter)
pvwatts_loc(lat=37, lng=-121)
lat = 37
lng = -121
nrelServer <- "https://developer.nrel.gov"
all = FALSE
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
loc <- paste0("lat=",lat,"&lon=",lng)
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
radius = 100
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
url
output <- pvwatts_get(url,...)
output <- pvwatts_get(url)
output
Sys.getenv("nrelToken")
Sys.getenv("nrelToken")
output <- pvwatts_get(url)
library(e.verse)
output <- pvwatts_get(url)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?elf::info_country
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
model.e::depreciation
View(model.e::depreciation)
View(model.e::deprMethod)
View(model.e:::deprMethod)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
Sys.getenv()
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
file.edit(file.path("~", ".Rprofile"))
Sys.getenv()
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?install_everse
??e.verse::install_everse
View(e.verse::install_everse)
?install_enoc
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
model.e::tax
e.unit::as.interval(rep("2020-06-09", 9), mins = 30)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
full_pqt_update()
library(e.verse)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
model.e:::vendorName
model.e:::vendorName[1]
unname(model.e:::vendorName[1])
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
library(tidyverse)
library(lubridate)
library(data.table)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Data Request Response 2")
Code_WD <- getwd()
setwd("../")
Main_WD <- getwd()
setwd(file.path(Main_WD, "Interval Meter Data", "Clean Interval Meter Data"))
Meter_WD <- getwd()
setwd(file.path(Main_WD, "Marginal Emissions Data", "Clean Marginal Emissions Data"))
Emissions_WD <- getwd()
setwd(file.path(Main_WD, "Rates"))
Rates_WD <- getwd()
setwd(file.path(Main_WD, "Wholesale Price Data", "Clean Wholesale Price Data"))
Wholesale_Price_WD <- getwd()
# Residential Customer Class
#
# 1.	Using EV-TOU 5 as a basis and 2019 CAISO wholesale pricing data, create a real-time pricing rate that is revenue neutral across the residential class.
#     By revenue neutral, we mean that SDG&E would receive the same revenue on an annual basis from all residential customers assuming no change in the quantity or timing of usage.
#     The rate should have the following characteristics.
#   a.	The UDC component should be identical to EV-TOU 5
#   b.	The RTP rate should have the same CARE and non-CARE fixed charges
#   c.	The commodity rate should include a component to cover SDG&E’s costs of procuring and delivering electricity from renewable sources used to comply with SDG&E’s RPS obligation.
#       SDG&E should allocate a set percentage of RPS energy to each interval according to the percentage of RPS-eligible renewable energy in SDG&E’s portfolio during the calendar year.
#       The portion of the total kWh consumed by a customer in each billing interval covered by the RPS allocation will be charged according the cost of RPS energy.
#       Electricity consumed above the RPS allocation will be billed at the real-time price described in bullet “f” below.
#       The RPS allocation of electricity should be shaped to ensure that most customers will consume more than the RPS allocation in each billing interval.
#       The price and/or shape of the RPS allocation could be fixed across the year or could vary by time to better match the timing and cost of the renewable generation in SDG&E’s portfolio.
#   d.	The commodity rate should include a component to cover any above-market energy costs from non-renewable sources that would appear in SDG&E’s PCIA charges.
#   e.	The commodity rate should include the generation capacity cost associated with each TOU period in EV-TOU 5.
#   f.	The summer on-peak generation capacity costs should be disaggregated into the cost to serve the top 50 hours, cost to serve hours 51 – 150, and cost to serve all other hours.
#       The cost to serve the top 50 hours and hours 51 – 150 should be designed as two different dynamic rate components (similar to OG&E’s Variable Peak Pricing tariff) called on a day-ahead basis.
#   g.	Remaining generation energy costs will be recovered from a real-time pricing component using CAISO’s fifteen-minute market prices CA SDG&E’s Default Load Aggregation Point,
#       grossed up for losses in the distribution system.
# See Rates/SDG&E EV-TOU-5-RTP. This rate does not account for RPS or above-market costs directly. It also does not modify the approach taken to recovering generation capacity costs.
SDGE_EV_TOU_5 <- readRDS(file.path(Rates_WD, "SDG&E EV-TOU-5", "2019", "15-Minute Data", "SDGE_EV_TOU_5.rds"))
SDGE_EV_TOU_5_RTP <- readRDS(file.path(Rates_WD, "SDG&E EV-TOU-5-RTP", "2019", "15-Minute Data", "SDGE_EV_TOU_5_RTP.rds"))
# Check for revenue neutrality - load up aggregated load profile, calculate total annual costs with new and old rate, confirm that they're equal.
aggRES <- readRDS(file.path(Meter_WD, "aggRES.rds"))
neutralityCheckRES <- aggRES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time") %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_EV_TOU_5 = Demand_kWh * Total_Energy_Rate_EV_TOU_5,
Total_Energy_Revenue_EV_TOU_5_RTP = Demand_kWh * Total_Energy_Rate_EV_TOU_5_RTP) %>%
summarize(Total_Energy_Revenue_EV_TOU_5 = sum(Total_Energy_Revenue_EV_TOU_5),
Total_Energy_Revenue_EV_TOU_5_RTP = sum(Total_Energy_Revenue_EV_TOU_5_RTP))
# neutralityCheckRES$Total_Energy_Revenue_EV_TOU_5 and neutralityCheckRES$Total_Energy_Revenue_EV_TOU_5_RTP are effectively identical.
# This confirms that the EV-TOU-5-RTP rate is revenue-neutral with the EV-TOU-5 rate for the pool of residential customers used in this analysis.
rm(neutralityCheckRES)
# 2.	Calculate the reduction in revenues SDG&E would collect assuming the top 10% of residential customers who would benefit the most from the rate designed in response to Question 1
# opt-in to the rate with no change in their electricity usage.
# What is the amount by which each residential non-RTP customer’s bill would need to increase on an annual basis to cover the revenue shortfall?
# Load residential meter data
cleanRES <- readRDS(file.path(Meter_WD, "cleanRES.rds"))
revenueReductionRES <- cleanRES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time") %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_EV_TOU_5 = Demand_kWh * Total_Energy_Rate_EV_TOU_5,
Total_Energy_Revenue_EV_TOU_5_RTP = Demand_kWh * Total_Energy_Rate_EV_TOU_5_RTP) %>%
group_by(meterID) %>%
summarize(Total_Energy_Revenue_EV_TOU_5 = sum(Total_Energy_Revenue_EV_TOU_5),
Total_Energy_Revenue_EV_TOU_5_RTP = sum(Total_Energy_Revenue_EV_TOU_5_RTP)) %>%
ungroup()
revenueReductionRES <- revenueReductionRES %>%
mutate(rateSwitchSavings = Total_Energy_Revenue_EV_TOU_5 - Total_Energy_Revenue_EV_TOU_5_RTP) %>%
mutate(rateSwitchSavingsRank = rank(-rateSwitchSavings, ties.method = "first")) %>%
mutate(top10Percent = rateSwitchSavingsRank <= round(nrow(revenueReductionRES) * (10/100))) %>%
mutate(revenueReduction = rateSwitchSavings * top10Percent)
totalRevenueReductionRES <- sum(revenueReductionRES$revenueReduction)
percentRevenueReductionRES <- totalRevenueReductionRES/sum(revenueReductionRES$Total_Energy_Revenue_EV_TOU_5)
# Having 10% of residential EV-TOU-5 customers switch to EV-TOU-5-RTP with no change in usage would reduce SDG&E revenue collection by 0.6173753%.
perCustomerRESbillIncreaseNonRTP <- totalRevenueReductionRES/round(0.9 * length(unique(cleanRES$meterID))) # Divide by 90% of total resi customers (all but those who rate-switch).
percentRESbillIncreaseNonRTP <- totalRevenueReductionRES/sum(revenueReductionRES$Total_Energy_Revenue_EV_TOU_5 * (1-revenueReductionRES$top10Percent))
# This would require an 0.8288555% increase in non-RTP customer bills to recover the lost revenue,
# or $8.08 per non-RTP EV-TOU-5 customer per year.
# These customers are (slightly) more expensive to serve, so this is actually undoing a previous cost shift.
rm(revenueReductionRES, totalRevenueReductionRES, percentRevenueReductionRES, perCustomerRESbillIncreaseNonRTP, percentRESbillIncreaseNonRTP)
# 3.	For 2019, identify the 600 fifteen-minute intervals with the highest DLAP-level fifteen-minute prices.
Clean_SDGE_RT5M_LMP <- readRDS(file.path(Wholesale_Price_WD, "Clean_SDGE_RT5M_LMP.rds"))
highest600LMPs2019 <- Clean_SDGE_RT5M_LMP %>%
top_n(n = 600, wt = LMP_RT5M)
ggplot(highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)),
aes(Month)) +
geom_histogram(binwidth = 1) +
xlab("Month of Year") +
ylab("Intervals in Top 600 LMPs") +
ggtitle("Intervals in Top 600 LMPs by Hour of Day") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5))
ggplot(highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)),
aes(Month)) +
geom_histogram(binwidth = 1) +
xlab("Month of Year") +
scale_y_continuous(breaks=seq(1,12))
ylab("Intervals in Top 600 LMPs") +
ggtitle("Intervals in Top 600 LMPs by Hour of Day") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5))
ggplot(highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)),
aes(Month)) +
geom_histogram(binwidth = 1) +
xlab("Month of Year") +
scale_y_continuous(breaks=seq(1,12)) +
ylab("Intervals in Top 600 LMPs") +
ggtitle("Intervals in Top 600 LMPs by Hour of Day") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5))
ggplot(highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)),
aes(Month)) +
geom_histogram(binwidth = 1) +
xlab("Month of Year") +
scale_x_continuous(breaks=seq(1,12)) +
ylab("Intervals in Top 600 LMPs") +
ggtitle("Intervals in Top 600 LMPs by Hour of Day") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5))
ggplot(highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)),
aes(Month)) +
geom_histogram(binwidth = 1) +
xlab("Month of Year") +
scale_x_continuous(breaks=seq(1,12)) +
ylab("Intervals in Top 600 LMPs") +
ggtitle("Intervals in Top 600 LMPs by Month of Year") +
theme(text = element_text(size = 15), plot.title = element_text(hjust = 0.5))
ggsave("Intervals in Top 600 LMPs by Month of Year.png", width = 11, height = 8.5, units = "in")
highest600LMPs2019MonthsSummary <- highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)) %>%
group_by(Month) %>%
summarize(Top_600_LMP_Interval_Count = n()) %>%
ungroup() %>%
mutate(Percent_of_Total = Top_600_LMP_Interval_Count/sum(Top_600_LMP_Interval_Count))
View(highest600LMPs2019MonthsSummary)
write.csv(highest600LMPs2019MonthSummary, "Highest 600 LMPs 2019 Month Summary.csv", row.names = F)
highest600LMPs2019MonthSummary <- highest600LMPs2019 %>%
mutate(Month = lubridate::month(Date_Time)) %>%
group_by(Month) %>%
summarize(Top_600_LMP_Interval_Count = n()) %>%
ungroup() %>%
mutate(Percent_of_Total = Top_600_LMP_Interval_Count/sum(Top_600_LMP_Interval_Count))
write.csv(highest600LMPs2019MonthSummary, "Highest 600 LMPs 2019 Month Summary.csv", row.names = F)
