??e.verse::install_everse
View(e.verse::install_everse)
?install_enoc
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
model.e::tax
e.unit::as.interval(rep("2020-06-09", 9), mins = 30)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
full_pqt_update()
library(e.verse)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
model.e:::vendorName
model.e:::vendorName[1]
unname(model.e:::vendorName[1])
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
setwd("~/Desktop/SDG&E JARP/Clean Data")
setwd("../Raw Data")
getwd()
Data_WD <- getwd()
rawRES <- read.csv("RES500.csv")
View(rawRES)
class(rawRES)
class(rawRES)
class(rawRES$INTRVL_DATE)
rawRES$INTRVL_DATE[1]
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19")
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Clean Data")
Code_WD <- getwd()
setwd("../Raw Data")
Data_WD <- getwd()
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19")
View(cleanRES)
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
View(cleanRES)
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = paste0("RES_", cumsum(meterID)))
View(cleanRES)
test <- cleanRES %>%
group_by(meterID) %>%
summarize(count = n())
View(test)
View(test)
test <- cleanRES %>%
group_by(meterID) %>%
summarize(count = n()) %>%
filter(count != 365)
View(test)
365*2
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n())
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID))
View(completeRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID))
115705/365
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = paste0("RES_", cumsum(meterID)))
View(completeRES)
unique(completeRES$CD_RATE)
completeEVTOU5 <- completeRES %>%
filter(CD_RATE == "EVTOU5")
View(completeEVTOU5)
365*2
rm(test)
View(completeEVTOU5)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24)
View(longEVTOU5)
?gsub
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = gsub("N", "", Time))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(Date, " ", Time, ":00"))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00"))
View(completeEVTOU5)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8"))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Clean Data")
Code_WD <- getwd()
setwd("../Raw Data")
Data_WD <- getwd()
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
View(rawRES)
View(cleanRES)
rm(rawRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
rm(cleanRES)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
# 57 of the 374 meters don't have 365 days of data. Remove these, and re-assign meterIDs to the remaining complete meter data.
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(cleanRES, incompleteRES)
View(completeRES)
completeEVTOU5 <- completeRES %>%
filter(CD_RATE == "EVTOU5")
rm(completeRES)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
View(longEVTOU5)
17520/8760
test <- longEVTOU5 %>%
filter(is.na(Demand_kWh))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
rm(completeEVTOU5)
rawLRG <- read.csv("LRG500.csv")
View(rawLRG)
rawALTOU <- rawLRG %>%
filter(CD_RATE == "ALTOU")
rm(rawLRG)
cleanALTOUALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
cleanALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
rawLRG <- read.csv("LRG500.csv")
# Filter to just AL-TOU customers (leave out AL-TOU-CP2 customers)
# There are 2 AL-TOU customers - one with net metering, and one without.
rawALTOU <- rawLRG %>%
filter(CD_RATE == "ALTOU")
rm(rawLRG)
cleanALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
rm(cleanALTOUALTOU)
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteALTOU)
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n())
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeALTOU <- cleanALTOU %>%
filter(!(meterID %in% incompleteALTOU$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
144-18
rm(cleanLRG, incompleteLRG)
rm(cleanALTOU, incompleteALTOU)
View(completeALTOU)
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96)
45990/365
View(longALTOU)
mutate(Time = as.numeric(gsub("N", "", Time)))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = as.numeric(gsub("N", "", Time)))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)) %>%
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)/4)
longALTOU <- longALTOU %>%
mutate(Hour = floor(Time),
Minute = (Time - floor(Time))*60)
View(completeALTOU)
longALTOU <- longALTOU %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Hour, ":", Minute))
longALTOU <- longALTOU %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8"))
View(completeALTOU)
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)/4) %>%
mutate(Hour = floor(Time),
Minute = (Time - floor(Time))*60) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Hour, ":", Minute)) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
4415040/35040
rm(completeALTOU)
rm(test)
setwd(Code_WD)
saveRDS(longEVTOU5, "longEVTOU5.rds")
saveRDS(completeALTOU, "completeALTOU.rds")
setwd(Code_WD)
saveRDS(longALTOU, "longALTOU.rds")
longEVTOU5 <- longEVTOU5 %>%
rename(Demand_kW = Demand_kWh)
View(longEVTOU5)
setwd(Code_WD)
saveRDS(longEVTOU5, "longEVTOU5.rds")
View(longALTOU)
longEVTOU5 <- longEVTOU5 %>%
mutate(Demand_kW = Demand_kWh * 4) %>%
select(-Demand_kWh)
longALTOU <- longALTOU %>%
mutate(Demand_kW = Demand_kWh * 4) %>%
select(-Demand_kWh)
setwd(Code_WD)
saveRDS(longALTOU, "longALTOU.rds")
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Interval Meter Data/Clean Interval Meter Data")
Code_WD <- getwd()
setwd("../Raw Interval Meter Data")
Data_WD <- getwd()
#### Load and Clean EV-TOU-5 Residential Load Profiles ####
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
# 57 of the 374 meters don't have 365 days of data. Remove these, and re-assign meterIDs to the remaining complete meter data.
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
# There are 317 meters in the final complete dataset.
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(cleanRES, incompleteRES)
View(completeRES)
unique(completeRES$CD_RATE)
completeTOUDR1 <- completeRES %>%
filter(CD_RATE = "TOUDR1")
completeTOUDR1 <- completeRES %>%
filter(CD_RATE == "TOUDR1")
View(completeTOUDR1)
38995/365
View(completeTOUDR1)
summaryRES <- completeRES %>%
group_by(CD_Rate) %>%
summarize(Customer_Count = n()/365)
summaryRES <- completeRES %>%
group_by(CD_RATE) %>%
summarize(Customer_Count = n()/365)
View(summaryRES)
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Interval Meter Data/Clean Interval Meter Data")
Code_WD <- getwd()
setwd("../Raw Interval Meter Data")
Data_WD <- getwd()
#### Load and Clean EV-TOU-5 Residential Load Profiles ####
rawRES <- read.csv("RES500.csv")
rawRES <- rawRES %>%
filter(CD_RATE %in% c("TOUDR1", "EVTOU5"))
rawRES <- read.csv("RES500.csv")
rawRES <- rawRES %>%
filter(CD_RATE %in% c("TOUDR1", "EVTOU5"))
50864/365
View(rawRES)
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
View(cleanRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n())
View(incompleteRES)
50864/365
sum(incompleteRES$Count)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
View(completeRES)
rm(cleanRES, incompleteRES)
4380/365
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
rawRES <- read.csv("RES500.csv")
# Filter to just TOU-DR-1 and EV-TOU-5
# There are 138 TOU-DR-1 customers and 2 EV-TOU-5 customers.
rawRES <- rawRES %>%
filter(CD_RATE %in% c("TOUDR1", "EVTOU5"))
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
# There are only 28 meters with 365 days of data.
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
4380/365
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
115705/365
View(completeRES)
rm(cleanRES, incompleteRES)
summaryRES <- completeRES %>%
group_by(CD_RATE) %>%
summarize(Customer_Count = n()/365)
View(summaryRES)
longRES <- completeRES %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
rm(completeRES)
View(longRES)
Start_Time_15_min = longRES$Date_Time[1]
End_Time_15_min = longRES$Date_Time[nrow(longRES)] + (45*60)
RES_15min <- data.frame(Date_Time_15_min = seq.POSIXt(Start_Time_15_min, End_Time_15_min, by = "15 min"))
rm(Start_Time_15_min, End_Time_15_min)
RES_15min <- RES_15min %>%
mutate(Date_Time = Date_Time_15_min)
minute(RES_15min$Date_Time) = 0
View(longRES)
longRES <- longRES %>%
left_join(RES_15min, by = "Date_Time") %>%
mutate(Date_Time = Date_Time_15_min) %>%
select(-Date_Time_15_min)
rm(RES_15min)
View(longRES)
setwd(Code_WD)
saveRDS(longRES, "longRES.rds")
rm(summaryRES)
rm(longRES)
setwd(Data_WD)
rawLRG <- read.csv("LRG500.csv")
View(rawLRG)
cleanLRG <- rawLRG %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawLRG)
incompleteLRG <- cleanLRG %>%
group_by(meterID) %>%
summarize(Count = n())
incompleteLRG <- cleanLRG %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
incompleteLRG <- cleanLRG %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeLRG <- cleanLRG %>%
filter(!(meterID %in% incompleteLRG$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
159870/365
rm(cleanLRG, incompleteLRG)
summaryLRG <- completeLRG %>%
group_by(CD_RATE) %>%
summarize(Customer_Count = n()/365)
View(summaryLRG)
rm(summaryLRG)
View(completeLRG)
longLRG <- completeLRG %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)/4) %>%
mutate(Hour = floor(Time),
Minute = (Time - floor(Time))*60) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Hour, ":", Minute)) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
View(longLRG)
rm(completeLRG)
setwd(Code_WD)
saveRDS(longLRG, "longLRG.rds")
