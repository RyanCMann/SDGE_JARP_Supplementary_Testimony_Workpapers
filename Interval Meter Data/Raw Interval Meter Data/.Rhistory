ggsave("Average Hourly MOER.png", width = 11, height = 8.5, units = "in")
getwd()
e.verse::install_everse(ref="dev",depend=F)
model <- readRDS(file.choose())
View(model)
performance <- model$model$`1`$performance
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?elf::sys_time
?elf::sys_clock
View(elf::sys_clock())
View(elf::sys_clock
)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
sku <- data.table(vendor = "tesla", energy = as.kwh(sapply(x,"[[", 1), hrs = 0), power = as.kw(sapply(x,"[[",2)))
View(fullPqtData$module)
1984/523
sku <- data.table(vendor = "tesla", energy = 1000, power = 500)
View(sku)
fullPqtData$module[vendor = "sungrow"]
fullPqtData$module[vendor == "sungrow"]
fullPqtData$module[vendor == "sungrow",ess_module_kwh]
fullPqtData$module[vendor == "nec",ess_module_kwh]
?%%
10 %% 5
5 %% 10
sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh]
sku$energy
15 %% 5
1300 %% 1000
class(fullPqtData$module[vendor == "nec",ess_module_kwh])
test <- fullPqtData$module[vendor == "nec",ess_module_kwh]
test
1000 %% 1300
1300 %% 1000
1000 %% 2440
sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0
any(sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0)
View(fullPqtData$module)
runApp('Desktop/EnerNOC Git Repositories/artemis')
View(sku)
sku[any(sku$energy %% fullPqtData$module[vendor == "sungrow",ess_module_kwh] == 0) & any(sku$power %% fullPqtData$module[vendor == "sungrow",ess_module_kw] == 0), vendor := "sungrow"]
sku[any(sku$energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0) & any(sku$power %% fullPqtData$module[vendor == "nec",ess_module_kw] == 0), vendor := "nec"]
sku[any(energy %% fullPqtData$module[vendor == "sungrow",ess_module_kwh] == 0) & any(power %% fullPqtData$module[vendor == "sungrow",ess_module_kw] == 0), vendor := "sungrow"]
sku[any(energy %% fullPqtData$module[vendor == "nec",ess_module_kwh] == 0) & any(power %% fullPqtData$module[vendor == "nec",ess_module_kw] == 0), vendor := "nec"]
runApp('Desktop/EnerNOC Git Repositories/artemis')
assign(“sku”, sku, globalenv())
assign("sku", sku, globalenv())
skutest <- copy(sku)
View(sku)
sku[any(energy %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
sku$energy %% fullPqtData$module[vendor == "sungrow", ess_module_kwh]
sku$energy
as.numeric(sku$energy)
sku[, sungrowEnergyMatch := any(as.numeric(energy) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
fullPqtData$module[vendor == "sungrow", ess_module_kwh]
as.numeric(sku[skuRow,energy])
skuRow <- 1
as.numeric(sku[skuRow,energy])
as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)
as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
View(sku)
any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)
sku[, .(sungrowEnergyMatch, sungrowPowerMatch, necEnergyMatch, necPowerMatch) := NA]
sku[, .(sungrowEnergyMatch := NA, sungrowPowerMatch := NA, necEnergyMatch := NA, necPowerMatch := NA)]
sku[, c("sungrowEnergyMatch" := NA, "sungrowPowerMatch" := NA, "necEnergyMatch" := NA, "necPowerMatch" := NA)]
View(sku)
sku[, c("sungrowEnergyMatch", "sungrowPowerMatch", "necEnergyMatch", "necPowerMatch") := NA]
View(sku)
skuRow
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
View(sku)
sku[skuRow, sungrowPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "sungrow", ess_module_kw] == 0)]
sku[skuRow, necEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "nec", ess_module_kwh] == 0)]
sku[skuRow, necPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0)]
View(sku)
for(skuRow in 1:nrow(sku)){
sku[skuRow, sungrowEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "sungrow", ess_module_kwh] == 0)]
sku[skuRow, sungrowPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "sungrow", ess_module_kw] == 0)]
sku[skuRow, necEnergyMatch := any(as.numeric(sku[skuRow,energy]) %% fullPqtData$module[vendor == "nec", ess_module_kwh] == 0)]
sku[skuRow, necPowerMatch := any(as.numeric(sku[skuRow,power]) %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0)]
}
View(sku)
sku[sungrowEnergyMatch & sungrowPowerMatch, vendor := "sungrow"]
View(sku)
sku[necEnergyMatch & necPowerMatch, vendor := "nec"]
View(sku)
skuRow
sku[skuRow,power]
sku[skuRow,power] %% fullPqtData$module[vendor == "nec", ess_module_kw]
sku[skuRow,power] %% fullPqtData$module[vendor == "nec", ess_module_kw] == 0
runApp('Desktop/EnerNOC Git Repositories/artemis')
runApp('Desktop/EnerNOC Git Repositories/artemis')
assign("sku", sku, globalenv())
View(sku)
runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
pvwatts_loc(37, -121)
pvwatts_loc(lat=37, lng=-121)
library(e.meter)
pvwatts_loc(lat=37, lng=-121)
lat = 37
lng = -121
nrelServer <- "https://developer.nrel.gov"
all = FALSE
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
loc <- paste0("lat=",lat,"&lon=",lng)
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
radius = 100
url <- paste0(nrelServer,"/api/solar/data_query/v1.json?",
loc,"&radius=",radius,"&all=",as.integer(all))
url
output <- pvwatts_get(url,...)
output <- pvwatts_get(url)
output
Sys.getenv("nrelToken")
Sys.getenv("nrelToken")
output <- pvwatts_get(url)
library(e.verse)
output <- pvwatts_get(url)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?elf::info_country
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
model.e::depreciation
View(model.e::depreciation)
View(model.e::deprMethod)
View(model.e:::deprMethod)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
Sys.getenv()
shiny::runApp('Desktop/EnerNOC Git Repositories/artemis')
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
file.edit(file.path("~", ".Rprofile"))
Sys.getenv()
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
?install_everse
??e.verse::install_everse
View(e.verse::install_everse)
?install_enoc
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
model.e::tax
e.unit::as.interval(rep("2020-06-09", 9), mins = 30)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
e.unit::as.interval(paste0("2020-05-05", " 00:00"), 30, T) + c(1:5)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
full_pqt_update()
library(e.verse)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
library(e.verse)
model.e:::vendorName
model.e:::vendorName[1]
unname(model.e:::vendorName[1])
devtools::install_github("e-verse/e.verse", host="github.bdap.enernoc.net/api/v3", dependencies=F)
e.verse::install_everse(ref="dev",depend=F)
setwd("~/Desktop/SDG&E JARP/Clean Data")
setwd("../Raw Data")
getwd()
Data_WD <- getwd()
rawRES <- read.csv("RES500.csv")
View(rawRES)
class(rawRES)
class(rawRES)
class(rawRES$INTRVL_DATE)
rawRES$INTRVL_DATE[1]
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19")
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Clean Data")
Code_WD <- getwd()
setwd("../Raw Data")
Data_WD <- getwd()
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19")
View(cleanRES)
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
View(cleanRES)
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = paste0("RES_", cumsum(meterID)))
View(cleanRES)
test <- cleanRES %>%
group_by(meterID) %>%
summarize(count = n())
View(test)
View(test)
test <- cleanRES %>%
group_by(meterID) %>%
summarize(count = n()) %>%
filter(count != 365)
View(test)
365*2
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n())
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID))
View(completeRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID))
115705/365
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = paste0("RES_", cumsum(meterID)))
View(completeRES)
unique(completeRES$CD_RATE)
completeEVTOU5 <- completeRES %>%
filter(CD_RATE == "EVTOU5")
View(completeEVTOU5)
365*2
rm(test)
View(completeEVTOU5)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24)
View(longEVTOU5)
?gsub
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = gsub("N", "", Time))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(Date, " ", Time, ":00"))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00"))
View(completeEVTOU5)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8"))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Clean Data")
Code_WD <- getwd()
setwd("../Raw Data")
Data_WD <- getwd()
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
View(rawRES)
View(cleanRES)
rm(rawRES)
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteRES)
rm(cleanRES)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rawRES <- read.csv("RES500.csv")
# Customers aren't individually labeled in the raw dataset. Assuming that each time the date resets back to Jan.1, a new customer's data is being provided.
cleanRES <- rawRES %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawRES)
# 57 of the 374 meters don't have 365 days of data. Remove these, and re-assign meterIDs to the remaining complete meter data.
incompleteRES <- cleanRES %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeRES <- cleanRES %>%
filter(!(meterID %in% incompleteRES$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(cleanRES, incompleteRES)
View(completeRES)
completeEVTOU5 <- completeRES %>%
filter(CD_RATE == "EVTOU5")
rm(completeRES)
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
View(longEVTOU5)
17520/8760
test <- longEVTOU5 %>%
filter(is.na(Demand_kWh))
longEVTOU5 <- completeEVTOU5 %>%
gather(key = "Time", value = "Demand_kWh", N1:N24) %>%
mutate(Time = as.numeric(gsub("N", "", Time)) - 1) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Time, ":00")) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, FL_NET_METER, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
rm(completeEVTOU5)
rawLRG <- read.csv("LRG500.csv")
View(rawLRG)
rawALTOU <- rawLRG %>%
filter(CD_RATE == "ALTOU")
rm(rawLRG)
cleanALTOUALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
cleanALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
rawLRG <- read.csv("LRG500.csv")
# Filter to just AL-TOU customers (leave out AL-TOU-CP2 customers)
# There are 2 AL-TOU customers - one with net metering, and one without.
rawALTOU <- rawLRG %>%
filter(CD_RATE == "ALTOU")
rm(rawLRG)
cleanALTOU <- rawALTOU %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
rm(rawALTOU)
rm(cleanALTOUALTOU)
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
View(incompleteALTOU)
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n())
incompleteALTOU <- cleanALTOU %>%
group_by(meterID) %>%
summarize(Count = n()) %>%
filter(Count != 365)
completeALTOU <- cleanALTOU %>%
filter(!(meterID %in% incompleteALTOU$meterID)) %>%
mutate(meterID = INTRVL_DATE == "1-Jan-19") %>%
mutate(meterID = cumsum(meterID))
144-18
rm(cleanLRG, incompleteLRG)
rm(cleanALTOU, incompleteALTOU)
View(completeALTOU)
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96)
45990/365
View(longALTOU)
mutate(Time = as.numeric(gsub("N", "", Time)))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = as.numeric(gsub("N", "", Time)))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)) %>%
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1))
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)/4)
longALTOU <- longALTOU %>%
mutate(Hour = floor(Time),
Minute = (Time - floor(Time))*60)
View(completeALTOU)
longALTOU <- longALTOU %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Hour, ":", Minute))
longALTOU <- longALTOU %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8"))
View(completeALTOU)
longALTOU <- completeALTOU %>%
gather(key = "Time", value = "Demand_kWh", N1:N96) %>%
mutate(Time = (as.numeric(gsub("N", "", Time)) - 1)/4) %>%
mutate(Hour = floor(Time),
Minute = (Time - floor(Time))*60) %>%
mutate(Date_Time = paste0(INTRVL_DATE, " ", Hour, ":", Minute)) %>%
mutate(Date_Time = as.POSIXct(strptime(Date_Time, format = "%d-%b-%y %H:%M"), tz = "Etc/GMT+8")) %>% # There doesn't appear to be any Daylight Savings Time offset in this dataset.
mutate(Date_Time = with_tz(Date_Time, tzone = "America/Los_Angeles")) %>%
select(meterID, CD_RATE, Date_Time, Demand_kWh) %>%
arrange(meterID, Date_Time)
4415040/35040
rm(completeALTOU)
rm(test)
setwd(Code_WD)
saveRDS(longEVTOU5, "longEVTOU5.rds")
saveRDS(completeALTOU, "completeALTOU.rds")
setwd(Code_WD)
saveRDS(longALTOU, "longALTOU.rds")
longEVTOU5 <- longEVTOU5 %>%
rename(Demand_kW = Demand_kWh)
View(longEVTOU5)
setwd(Code_WD)
saveRDS(longEVTOU5, "longEVTOU5.rds")
View(longALTOU)
longEVTOU5 <- longEVTOU5 %>%
mutate(Demand_kW = Demand_kWh * 4) %>%
select(-Demand_kWh)
longALTOU <- longALTOU %>%
mutate(Demand_kW = Demand_kWh * 4) %>%
select(-Demand_kWh)
setwd(Code_WD)
saveRDS(longALTOU, "longALTOU.rds")
setwd("~/Desktop/SDG&E JARP/Interval Meter Data/Clean Interval Meter Data")
library(tidyverse)
library(lubridate)
# Disable Scientific Notation
options(scipen = 999)
# Set Working Directories
setwd("~/Desktop/SDG&E JARP/Interval Meter Data/Clean Interval Meter Data")
Code_WD <- getwd()
setwd("../Raw Interval Meter Data")
Data_WD <- getwd()
