testSmall <- test %>%
filter(Date == as.Date("2019-11-23", tz = "America/Los_Angeles")) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Daily_Demand_Shift_kWh = -sum(Demand_Shift_kWh))
testSmall <- test %>%
filter(Date == as.Date("2019-11-23", tz = "America/Los_Angeles")) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag), 0)
testSmall <- test %>%
filter(Date == as.Date("2019-11-23", tz = "America/Los_Angeles")) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0))
testSmall <- test %>%
filter(Date == as.Date("2019-11-23", tz = "America/Los_Angeles")) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh)
sum(testSmall$Demand_Shift_kWh)
test <- shifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh)
ungroup()
test <- shifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh) %>%
ungroup()
sum(test$Demand_Shift_kWh)
rm(test, testSmall)
shifted25RES <- shifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh) %>%
ungroup()
View(shifted25RES)
shifted50RES <- shifted50RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh) %>%
ungroup()
getwd()
setwd("~/Desktop")
rmarkdown::render("SDGE_JARP_Data_Request_Response_2.R", "pdf_document")
setwd("~/Desktop/SDG&E JARP/Data Request Response 2")
rmarkdown::render("SDGE_JARP_Data_Request_Response_2.R", "pdf_document")
View(shifted25RES)
shifted25RES$Demand_Shift_kWh * shifted25RES$LMP_RT5M
sum(avoidedCostshifted25RES$Demand_Shift_kWh * shifted25RES$LMP_RT5M)
sum(shifted25RES$Demand_Shift_kWh * shifted25RES$LMP_RT5M)
sum(shifted25RES$Demand_kWh * shifted25RES$LMP_RT5M)
-sum(shifted25RES$Demand_Shift_kWh * shifted25RES$LMP_RT5M)/sum(shifted25RES$Demand_kWh * shifted25RES$LMP_RT5M)
600/35040
-sum(shifted50RES$Demand_Shift_kWh * shifted50RES$LMP_RT5M)/sum(shifted50RES$Demand_kWh * shifted50RES$LMP_RT5M)
avoidedCostPercentShifted25RES <- -sum(shifted25RES$Demand_Shift_kWh * shifted25RES$LMP_RT5M)/sum(shifted25RES$Demand_kWh * shifted25RES$LMP_RT5M)
# If load is reduced by 25% during the top 600 hours (and shifted to other hours), SDG&E's avoided cost is reduced by 0.44%
avoidedCostPercentShifted50RES <- -sum(shifted50RES$Demand_Shift_kWh * shifted50RES$LMP_RT5M)/sum(shifted50RES$Demand_kWh * shifted50RES$LMP_RT5M)
rm(avoidedCostPercentShifted25RES, avoidedCostPercentShifted50RES)
Clean_SDGE_SGIP_MOER <- readRDS(file.path(Emissions_WD, "Clean_SDGE_SGIP_MOER.rds"))
shifted25RES <- shifted25RES %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
View(shifted25RES)
shifted50RES <- shifted50RES %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
-sum(shifted25RES$Demand_Shift_kWh * shifted25RES$moer)
sum(shifted25RES$Demand_kWh * shifted25RES$moer)
-sum(shifted25RES$Demand_Shift_kWh * shifted25RES$moer)/sum(shifted25RES$Demand_kWh * shifted25RES$moer)
600/35040
365*4*4
-sum(shifted25RES$Demand_Shift_kWh * shifted25RES$moer)/sum(shifted25RES$Demand_kWh * shifted25RES$moer)
-sum(shifted50RES$Demand_Shift_kWh * shifted50RES$moer)/sum(shifted50RES$Demand_kWh * shifted50RES$moer)
avoidedGHGPercentShifted25RES <- -sum(shifted25RES$Demand_Shift_kWh * shifted25RES$moer)/sum(shifted25RES$Demand_kWh * shifted25RES$moer)
# If load is reduced by 25% during the top 600 hours (and shifted to other hours), SDG&E's avoided GHG emissions are equal to 0.09026507% of current emissions
avoidedGHGPercentShifted50RES <- -sum(shifted50RES$Demand_Shift_kWh * shifted50RES$moer)/sum(shifted50RES$Demand_kWh * shifted50RES$moer)
rm(avoidedGHGPercentShifted25RES, avoidedGHGPercentShifted50RES)
TOU_DR_1 <- readRDS(file.path(Rates_WD, "SDG&E TOU-DR-1", "2019", "15-Minute Data", "TOU_DR_1.rds"))
View(TOU_DR_1)
shifted25RES <- shifted25RES %>%
left_join(TOU_DR_1, by = "Date_Time")
View(shifted25RES)
sum(shifted25RES$Demand_kWh * Total_Energy_Rate_TOU_DR_1)
sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_TOU_DR_1)
shifted25RES <- shifted25RES %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time")
sum((shifted25RES$Demand_kWh + shifted25RES$Demand_Shift_kWh) * shifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_TOU_DR_1)
shifted25RES <- shifted25RES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time")
sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_EV_TOU_5)
1491897/1748150
1-(1491897/1748150)
sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
sum((shifted25RES$Demand_kWh + shifted25RES$Demand_Shift_kWh) * shifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
(1491897 - 1490440)/1491897
sum((shifted50RES$Demand_kWh + shifted50RES$Demand_Shift_kWh) * shifted50RES$Total_Energy_Rate_EV_TOU_5_RTP)
shifted50RES <- shifted50RES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time") %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time") %>%
left_join(TOU_DR_1, by = "Date_Time")
sum((shifted50RES$Demand_kWh + shifted50RES$Demand_Shift_kWh) * shifted50RES$Total_Energy_Rate_EV_TOU_5_RTP)
(1491897 - 1488982)/1491897
totalAnnualRevenue_TOU_DR_1 <- sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_TOU_DR_1) # 1,748,150
totalAnnualRevenue_EV_TOU_5 <- sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_EV_TOU_5) # 1,491,897 (14.65852% lower than revenue collected on TOU-DR-1)
totalAnnualRevenue_EV_TOU_5_RTP <- sum(shifted25RES$Demand_kWh * shifted25RES$Total_Energy_Rate_EV_TOU_5_RTP) # 1,491,897 (same as above, because rate is revenue-neutral)
# Total revenue collected with 25% load-shifting is 1,490,440 (0.0976609% lower than revenue collected without 25% load-shifting)
totalAnnualRevenue_EV_TOU_5_RTP_shifted25 <- sum((shifted25RES$Demand_kWh + shifted25RES$Demand_Shift_kWh) * shifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
# Total revenue collected with 50% load-shifting is 1,488,982 (0.1953888% lower than revenue collected without 50% load-shifting)
totalAnnualRevenue_EV_TOU_5_RTP_shifted50 <- sum((shifted50RES$Demand_kWh + shifted50RES$Demand_Shift_kWh) * shifted50RES$Total_Energy_Rate_EV_TOU_5_RTP)
rm(totalAnnualRevenue_TOU_DR_1, totalAnnualRevenue_EV_TOU_5, totalAnnualRevenue_EV_TOU_5_RTP, totalAnnualRevenue_EV_TOU_5_RTP_shifted25, totalAnnualRevenue_EV_TOU_5_RTP_shifted50)
rm(TOU_DR_1)
SDGE_TOU_DR_1 <- readRDS(file.path(Rates_WD, "SDG&E TOU-DR-1", "2019", "15-Minute Data", "TOU_DR_1.rds"))
SDGE_TOU_DR_1 <- readRDS(file.path(Rates_WD, "SDG&E TOU-DR-1", "2019", "15-Minute Data", "TOU_DR_1.rds"))
rm(highest600LMPs2019)
rm(SDGE_AL_TOU, SDGE_AL_TOU_RTP)
rm(shifted25RES, shifted50RES)
?bottom_n
?top_n
lowest600LMPs2019 <- Clean_SDGE_RT5M_LMP %>%
top_n(n = 600, wt = -LMP_RT5M)
View(lowest600LMPs2019)
reverseShifted25RES <- aggRES %>%
left_join(lowest600LMPs2019, by = "Date_Time") %>%
mutate(bottom600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = Demand_kWh * bottom600IntervalFlag * (10/100) * (25/100))
View(reverseShifted25RES)
sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_Shift_kWh)
sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_kWh)
sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_Shift_kWh)/sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_kWh)
reverseShifted25RES <- aggRES %>%
left_join(lowest600LMPs2019, by = "Date_Time") %>%
mutate(bottom600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = Demand_kWh * bottom600IntervalFlag * (10/100) * (25/100)) # 10% of the customers increase demand by 25%
troughIncreasePercentRES25 <- sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_Shift_kWh)/sum(reverseShifted25RES$bottom600IntervalFlag * reverseShifted25RES$Demand_kWh)
# Demand during these 600 low-priced intervals is increased by 2.5% on average, if 10% of customers increase demand by 25%.
reverseShifted50RES <- aggRES %>%
left_join(lowest600LMPs2019, by = "Date_Time") %>%
mutate(bottom600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = Demand_kWh * bottom600IntervalFlag * (10/100) * (50/100)) # 10% of the customers increase demand by 50%
troughIncreasePercentRES50 <- sum(reverseShifted50RES$bottom600IntervalFlag * reverseShifted50RES$Demand_Shift_kWh)/sum(reverseShifted50RES$bottom600IntervalFlag * reverseShifted50RES$Demand_kWh)
rm(troughIncreasePercentRES25, troughIncreasePercentRES50, lowest600LMPs2019)
lowest600LMPs2019 <- Clean_SDGE_RT5M_LMP %>%
top_n(n = 600, wt = -LMP_RT5M)
View(lowest600LMPs2019)
rm(lowest600LMPs2019)
View(reverseShifted25RES)
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first"))
View(test)
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles"))
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first"))
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag))
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount)
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0))
test <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
filter(Date == as.Date("2019-01-23", tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Decrease_kWh) %>%
ungroup()
reverseShifted25RES <- reverseShifted25RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Decrease_kWh) %>%
ungroup()
reverseShifted50RES <- reverseShifted50RES %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Decrease_kWh) %>%
ungroup()
rm(test)
-sum(reverseShifted25RES$Demand_Shift_kWh * reverseShifted25RES$LMP_RT5M)/sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$LMP_RT5M)
-sum(reverseShifted50RES$Demand_Shift_kWh * reverseShifted50RES$LMP_RT5M)/sum(reverseShifted50RES$Demand_kWh * reverseShifted50RES$LMP_RT5M)
avoidedCostPercentReverseShifted25RES <- -sum(reverseShifted25RES$Demand_Shift_kWh * reverseShifted25RES$LMP_RT5M)/sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$LMP_RT5M)
# If load is increased by 25% during the bottom 600 hours (and shifted to other hours), SDG&E's avoided cost is equal to 0.05109809% of current costs.
avoidedCostPercentReverseShifted50RES <- -sum(reverseShifted50RES$Demand_Shift_kWh * reverseShifted50RES$LMP_RT5M)/sum(reverseShifted50RES$Demand_kWh * reverseShifted50RES$LMP_RT5M)
# If load is increased by 50% during the bottom 600 hours (and shifted to other hours), SDG&E's avoided cost is equal to 0.1021962% of current costs.
rm(avoidedCostPercentReverseShifted25RES, avoidedCostPercentReverseShifted50RES)
reverseShifted25RES <- reverseShifted25RES %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
reverseShifted50RES <- reverseShifted50RES %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
-sum(reverseShifted25RES$Demand_Shift_kWh * reverseShifted25RES$moer)/sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$moer)
-sum(reverseShifted25RES$Demand_Shift_kWh * reverseShifted25RES$moer)/sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$moer)
-sum(reverseShifted50RES$Demand_Shift_kWh * reverseShifted50RES$moer)/sum(reverseShifted50RES$Demand_kWh * reverseShifted50RES$moer)
avoidedGHGPercentReverseShifted25RES <- -sum(reverseShifted25RES$Demand_Shift_kWh * reverseShifted25RES$moer)/sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$moer)
# If load is increased by 25% during the bottom 600 hours (shifted from other hours), SDG&E's avoided GHG emissions are equal to 0.02808521% of current emissions
avoidedGHGPercentReverseShifted50RES <- -sum(reverseShifted50RES$Demand_Shift_kWh * reverseShifted50RES$moer)/sum(reverseShifted50RES$Demand_kWh * reverseShifted50RES$moer)
# If load is increased by 50% during the bottom 600 hours (shifted from other hours), SDG&E's avoided GHG emissions are equal to 0.05617042% of current emissions
rm(avoidedGHGPercentReverseShifted25RES, avoidedGHGPercentReverseShifted50RES)
reverseShifted25RES <- reverseShifted25RES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time") %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time") %>%
left_join(SDGE_TOU_DR_1, by = "Date_Time")
reverseShifted50RES <- reverseShifted50RES %>%
left_join(SDGE_EV_TOU_5, by = "Date_Time") %>%
left_join(SDGE_EV_TOU_5_RTP, by = "Date_Time") %>%
left_join(SDGE_TOU_DR_1, by = "Date_Time")
sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_TOU_DR_1)
sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5)
sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
sum((reverseShifted25RES$Demand_kWh + reverseShifted25RES$Demand_Shift_kWh) * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
totalAnnualRevenue_TOU_DR_1 <- sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_TOU_DR_1) # 1,748,150
totalAnnualRevenue_EV_TOU_5 <- sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5) # 1,491,897 (14.65852% lower than revenue collected on TOU-DR-1)
totalAnnualRevenue_EV_TOU_5_RTP <- sum(reverseShifted25RES$Demand_kWh * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5_RTP) # 1,491,897 (same as above, because rate is revenue-neutral)
# Total revenue collected with 25% reverse-load-shifting is 1,491,666 (0.0976609% lower than revenue collected without 25% load-shifting)
totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted25 <- sum((reverseShifted25RES$Demand_kWh + reverseShifted25RES$Demand_Shift_kWh) * reverseShifted25RES$Total_Energy_Rate_EV_TOU_5_RTP)
totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted50 <- sum((reverseShifted50RES$Demand_kWh + reverseShifted50RES$Demand_Shift_kWh) * reverseShifted50RES$Total_Energy_Rate_EV_TOU_5_RTP)
sum((reverseShifted50RES$Demand_kWh + reverseShifted50RES$Demand_Shift_kWh) * reverseShifted50RES$Total_Energy_Rate_EV_TOU_5_RTP)
(totalAnnualRevenue_EV_TOU_5_RTP - totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted25)/totalAnnualRevenue_EV_TOU_5_RTP
(totalAnnualRevenue_EV_TOU_5_RTP - totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted50)/totalAnnualRevenue_EV_TOU_5_RTP
rm(totalAnnualRevenue_TOU_DR_1, totalAnnualRevenue_EV_TOU_5, totalAnnualRevenue_EV_TOU_5_RTP, totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted25, totalAnnualRevenue_EV_TOU_5_RTP_reverseShifted50)
rm(reverseShifted25RES, reverseShifted50RES)
rm(aggRES, cleanRES, SDGE_EV_TOU_5, SDGE_EV_TOU_5_RTP, SDGE_TOU_DR_1)
aggLRG <- readRDS(file.path(Meter_WD, "aggLRG.rds"))
SDGE_AL_TOU <- readRDS(file.path(Rates_WD, "SDG&E AL-TOU", "2019", "15-Minute Data", "SDGE_AL_TOU.rds"))
SDGE_AL_TOU_RTP <- readRDS(file.path(Rates_WD, "SDG&E AL-TOU-RTP", "2019", "15-Minute Data", "SDGE_AL_TOU_RTP.rds"))
neutralityCheckLRG <- aggLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_SDGE_AL_TOU = Demand_kWh * Total_Energy_Rate_SDGE_AL_TOU,
Total_Energy_Revenue_SDGE_AL_TOU_RTP = Demand_kWh * Total_Energy_Rate_SDGE_AL_TOU_RTP) %>%
summarize(Total_Energy_Revenue_SDGE_AL_TOU = sum(Total_Energy_Revenue_SDGE_AL_TOU),
Total_Energy_Revenue_SDGE_AL_TOU_RTP = sum(Total_Energy_Revenue_SDGE_AL_TOU_RTP))
neutralityCheckLRG <- aggLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
View(neutralityCheckLRG)
neutralityCheckLRG <- aggLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_SDGE_AL_TOU = Demand_kWh * Total_Energy_Rate_AL_TOU,
Total_Energy_Revenue_SDGE_AL_TOU_RTP = Demand_kWh * Total_Energy_Rate_AL_TOU_RTP) %>%
summarize(Total_Energy_Revenue_SDGE_AL_TOU = sum(Total_Energy_Revenue_AL_TOU),
Total_Energy_Revenue_SDGE_AL_TOU_RTP = sum(Total_Energy_Revenue_AL_TOU_RTP))
neutralityCheckLRG <- aggLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_SDGE_AL_TOU = Demand_kWh * Total_Energy_Rate_AL_TOU,
Total_Energy_Revenue_SDGE_AL_TOU_RTP = Demand_kWh * Total_Energy_Rate_AL_TOU_RTP) %>%
summarize(Total_Energy_Revenue_SDGE_AL_TOU = sum(Total_Energy_Revenue_SDGE_AL_TOU),
Total_Energy_Revenue_SDGE_AL_TOU_RTP = sum(Total_Energy_Revenue_SDGE_AL_TOU_RTP))
rm(neutralityCheckLRG)
revenueReductionLRG <- cleanLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
cleanLRG <- readRDS(file.path(Meter_WD, "cleanLRG.rds"))
revenueReductionLRG <- cleanLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
View(revenueReductionLRG)
revenueReductionLRG <- cleanLRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time") %>%
mutate(Total_Energy_Revenue_AL_TOU = Demand_kWh * Total_Energy_Rate_AL_TOU,
Total_Energy_Revenue_AL_TOU_RTP = Demand_kWh * Total_Energy_Rate_AL_TOU_RTP) %>%
group_by(meterID) %>%
summarize(Total_Energy_Revenue_AL_TOU = sum(Total_Energy_Revenue_AL_TOU),
Total_Energy_Revenue_AL_TOU_RTP = sum(Total_Energy_Revenue_AL_TOU_RTP)) %>%
ungroup()
View(revenueReductionLRG)
revenueReductionLRG <- revenueReductionLRG %>%
mutate(rateSwitchSavings = Total_Energy_Revenue_AL_TOU - Total_Energy_Revenue_AL_TOU_RTP) %>%
mutate(rateSwitchSavingsRank = rank(-rateSwitchSavings, ties.method = "first")) %>%
mutate(top10Percent = rateSwitchSavingsRank <= round(nrow(revenueReductionLRG) * (10/100))) %>%
mutate(revenueReduction = rateSwitchSavings * top10Percent)
sum(revenueReductionLRG$revenueReduction)/sum(revenueReductionLRG$Total_Energy_Revenue_AL_TOU)
sum(revenueReductionLRG$revenueReduction)/sum(revenueReductionLRG$Total_Energy_Revenue_AL_TOU * (1-revenueReductionLRG$top10Percent))
totalRevenueReductionLRG <- sum(revenueReductionLRG$revenueReduction)/sum(revenueReductionLRG$Total_Energy_Revenue_AL_TOU)
# Having 10% of residential AL-TOU customers switch to AL-TOU-RTP with no change in usage would reduce revenue collection by 0.226452%
LRGbillIncreaseNonRTP <- sum(revenueReductionLRG$revenueReduction)/sum(revenueReductionLRG$Total_Energy_Revenue_AL_TOU * (1-revenueReductionLRG$top10Percent))
# This would require an 0.3795135% increase in non-RTP customer bills to recover the lost revenue. These customers are (slightly) more expensive to serve, so this is actually undoing a previous cost shift.
rm(revenueReductionLRG, totalRevenueReductionLRG, LRGbillIncreaseNonRTP)
highest600LMPs2019 <- Clean_SDGE_RT5M_LMP %>%
top_n(n = 600, wt = LMP_RT5M)
lowest600LMPs2019 <- Clean_SDGE_RT5M_LMP %>%
top_n(n = 600, wt = -LMP_RT5M)
shifted25LRG <- aggLRG %>%
left_join(highest600LMPs2019, by = "Date_Time") %>%
mutate(top600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = -Demand_kWh * top600IntervalFlag * (10/100) * (25/100))
rm(cleanLRG)
shifted25LRG <- aggLRG %>%
left_join(highest600LMPs2019, by = "Date_Time") %>%
mutate(top600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = -Demand_kWh * top600IntervalFlag * (10/100) * (25/100))
peakReductionPercentLRG25 <- -sum(shifted25LRG$top600IntervalFlag * shifted25LRG$Demand_Shift_kWh)/sum(shifted25LRG$top600IntervalFlag * shifted25LRG$Demand_kWh)
shifted50LRG <- aggLRG %>%
left_join(highest600LMPs2019, by = "Date_Time") %>%
mutate(top600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = -Demand_kWh * top600IntervalFlag * (10/100) * (50/100)) # 10% of the customers reduce demand by 50%
peakReductionPercentLRG50 <- -sum(shifted50LRG$top600IntervalFlag * shifted50LRG$Demand_Shift_kWh)/sum(shifted50LRG$top600IntervalFlag * shifted50LRG$Demand_kWh)
rm(peakReductionPercentLRG25, peakReductionPercentLRG50)
shifted25LRG <- shifted25LRG %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh) %>%
ungroup()
shifted50LRG <- shifted50LRG %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(LMP_RT5M, ties.method = "first")) %>%
mutate(dailyTop600IntervalCount = sum(top600IntervalFlag)) %>%
mutate(dailyLowLMPFlag = lmpRanking <= dailyTop600IntervalCount) %>%
mutate(Demand_Increase_kWh = ifelse(dailyTop600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyTop600IntervalCount * dailyLowLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Increase_kWh) %>%
ungroup()
avoidedCostPercentShifted25LRG <- -sum(shifted25LRG$Demand_Shift_kWh * shifted25LRG$LMP_RT5M)/sum(shifted25LRG$Demand_kWh * shifted25LRG$LMP_RT5M)
-sum(shifted25LRG$Demand_Shift_kWh * shifted25LRG$LMP_RT5M)/sum(shifted25LRG$Demand_kWh * shifted25LRG$LMP_RT5M)
-sum(shifted50LRG$Demand_Shift_kWh * shifted50LRG$LMP_RT5M)/sum(shifted50LRG$Demand_kWh * shifted50LRG$LMP_RT5M)
avoidedCostPercentShifted25LRG <- -sum(shifted25LRG$Demand_Shift_kWh * shifted25LRG$LMP_RT5M)/sum(shifted25LRG$Demand_kWh * shifted25LRG$LMP_RT5M)
# If load is reduced by 25% during the top 600 hours (and shifted to other hours), SDG&E's avoided cost is equal to 0.4739397% of current costs.
avoidedCostPercentShifted50LRG <- -sum(shifted50LRG$Demand_Shift_kWh * shifted50LRG$LMP_RT5M)/sum(shifted50LRG$Demand_kWh * shifted50LRG$LMP_RT5M)
# If load is reduced by 50% during the top 600 hours (and shifted to other hours), SDG&E's avoided cost is equal to 0.9478794% of current costs.
rm(avoidedCostPercentShifted25LRG, avoidedCostPercentShifted50LRG)
shifted25LRG <- shifted25LRG %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
shifted50LRG <- shifted50LRG %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
-sum(shifted25LRG$Demand_Shift_kWh * shifted25LRG$moer)/sum(shifted25LRG$Demand_kWh * shifted25LRG$moer)
-sum(shifted50LRG$Demand_Shift_kWh * shifted50LRG$moer)/sum(shifted50LRG$Demand_kWh * shifted50LRG$moer)
avoidedGHGPercentShifted25LRG <- -sum(shifted25LRG$Demand_Shift_kWh * shifted25LRG$moer)/sum(shifted25LRG$Demand_kWh * shifted25LRG$moer)
# If load is reduced by 25% during the top 600 hours (and shifted to other hours), SDG&E's avoided GHG emissions are equal to 0.08994294% of current emissions
avoidedGHGPercentShifted50LRG <- -sum(shifted50LRG$Demand_Shift_kWh * shifted50LRG$moer)/sum(shifted50LRG$Demand_kWh * shifted50LRG$moer)
# If load is reduced by 50% during the top 600 hours (and shifted to other hours), SDG&E's avoided GHG emissions are equal to 0.1798859% of current emissions
rm(avoidedGHGPercentShifted25LRG, avoidedGHGPercentShifted50LRG)
shifted25LRG <- shifted25LRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
shifted50LRG <- shifted50LRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU)
sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU)
sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
sum((shifted25LRG$Demand_kWh + shifted25LRG$Demand_Shift_kWh) * shifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
sum((shifted50LRG$Demand_kWh + shifted50LRG$Demand_Shift_kWh) * shifted50LRG$Total_Energy_Rate_AL_TOU_RTP)
totalAnnualRevenue_AL_TOU <- sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU) # 21,016,038
totalAnnualRevenue_AL_TOU_RTP <- sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU_RTP) # 21,016,038 (same as above, because rate is revenue-neutral)
# Total revenue collected with 25% load-shifting is 20,979,721 (0.0976609% lower than revenue collected without 25% load-shifting)
totalAnnualRevenue_AL_TOU_RTP_shifted25 <- sum((shifted25LRG$Demand_kWh + shifted25LRG$Demand_Shift_kWh) * shifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
# Total revenue collected with 50% load-shifting is 20,943,404 (0.1953888% lower than revenue collected without 50% load-shifting)
totalAnnualRevenue_AL_TOU_RTP_shifted50 <- sum((shifted50LRG$Demand_kWh + shifted50LRG$Demand_Shift_kWh) * shifted50LRG$Total_Energy_Rate_AL_TOU_RTP)
(totalAnnualRevenue_AL_TOU_RTP - totalAnnualRevenue_AL_TOU_RTP_shifted25)/totalAnnualRevenue_AL_TOU_RTP
(totalAnnualRevenue_AL_TOU_RTP - totalAnnualRevenue_AL_TOU_RTP_shifted50)/totalAnnualRevenue_AL_TOU_RTP
rm(totalAnnualRevenue_AL_TOU, totalAnnualRevenue_AL_TOU_RTP, totalAnnualRevenue_AL_TOU_RTP_shifted25, totalAnnualRevenue_AL_TOU_RTP_shifted50)
rm(shifted25LRG, shifted50LRG)
reverseShifted25LRG <- aggLRG %>%
left_join(lowest600LMPs2019, by = "Date_Time") %>%
mutate(bottom600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = Demand_kWh * bottom600IntervalFlag * (10/100) * (25/100))
troughIncreasePercentLRG25 <- sum(reverseShifted25LRG$bottom600IntervalFlag * reverseShifted25LRG$Demand_Shift_kWh)/sum(reverseShifted25LRG$bottom600IntervalFlag * reverseShifted25LRG$Demand_kWh)
reverseShifted50LRG <- aggLRG %>%
left_join(lowest600LMPs2019, by = "Date_Time") %>%
mutate(bottom600IntervalFlag = !is.na(LMP_RT5M)) %>%
mutate(Demand_Shift_kWh = Demand_kWh * bottom600IntervalFlag * (10/100) * (50/100)) # 10% of the customers increase demand by 50%
troughIncreasePercentLRG50 <- sum(reverseShifted50LRG$bottom600IntervalFlag * reverseShifted50LRG$Demand_Shift_kWh)/sum(reverseShifted50LRG$bottom600IntervalFlag * reverseShifted50LRG$Demand_kWh)
rm(troughIncreasePercentLRG25, troughIncreasePercentLRG50)
# Methodology: the number of intervals of curtailment are assumed to be equal to the number of intervals of load increase for every day.
# For example, if a given day has 2 intervals (30 minutes) with LMPs in the annual bottom 600, it's assumed that load is increased in the 2 intervals of that day with highest LMPs.
reverseShifted25LRG <- reverseShifted25LRG %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Decrease_kWh) %>%
ungroup()
reverseShifted50LRG <- reverseShifted50LRG %>%
select(-LMP_RT5M) %>%
left_join(Clean_SDGE_RT5M_LMP, by = "Date_Time") %>%
mutate(Date = as.Date(Date_Time, tz = "America/Los_Angeles")) %>%
group_by(Date) %>%
mutate(lmpRanking = rank(-LMP_RT5M, ties.method = "first")) %>%
mutate(dailyBottom600IntervalCount = sum(bottom600IntervalFlag)) %>%
mutate(dailyHighLMPFlag = lmpRanking <= dailyBottom600IntervalCount) %>%
mutate(Demand_Decrease_kWh = ifelse(dailyBottom600IntervalCount > 0, -sum(Demand_Shift_kWh)/dailyBottom600IntervalCount * dailyHighLMPFlag, 0)) %>%
mutate(Demand_Shift_kWh = Demand_Shift_kWh + Demand_Decrease_kWh) %>%
ungroup()
-sum(reverseShifted25LRG$Demand_Shift_kWh * reverseShifted25LRG$LMP_RT5M)/sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$LMP_RT5M)
-sum(reverseShifted50LRG$Demand_Shift_kWh * reverseShifted50LRG$LMP_RT5M)/sum(reverseShifted50LRG$Demand_kWh * reverseShifted50LRG$LMP_RT5M)
avoidedCostPercentReverseShifted25LRG <- -sum(reverseShifted25LRG$Demand_Shift_kWh * reverseShifted25LRG$LMP_RT5M)/sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$LMP_RT5M)
# If load is increased by 25% during the bottom 600 hours (shifted from other hours), SDG&E's avoided cost is equal to 0.1114512% of current costs.
# It makes sense that this value is lower than from the standard shifting case, because reducing curtailment is less lucrative than avoiding the annual LMP peaks.
avoidedCostPercentReverseShifted50LRG <- -sum(reverseShifted50LRG$Demand_Shift_kWh * reverseShifted50LRG$LMP_RT5M)/sum(reverseShifted50LRG$Demand_kWh * reverseShifted50LRG$LMP_RT5M)
# If load is increased by 50% during the bottom 600 hours (shifted from other hours), SDG&E's avoided cost is equal to 0.2229024% of current costs.
# It makes sense that this value is lower than from the standard shifting case, because reducing curtailment is less lucrative than avoiding the annual LMP peaks.
rm(avoidedCostPercentReverseShifted25LRG, avoidedCostPercentReverseShifted50LRG)
reverseShifted25LRG <- reverseShifted25LRG %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
reverseShifted50LRG <- reverseShifted50LRG %>%
left_join(Clean_SDGE_SGIP_MOER, by = "Date_Time")
-sum(reverseShifted25LRG$Demand_Shift_kWh * reverseShifted25LRG$moer)/sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$moer)
-sum(reverseShifted50LRG$Demand_Shift_kWh * reverseShifted50LRG$moer)/sum(reverseShifted50LRG$Demand_kWh * reverseShifted50LRG$moer)
avoidedGHGPercentReverseShifted25LRG <- -sum(reverseShifted25LRG$Demand_Shift_kWh * reverseShifted25LRG$moer)/sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$moer)
# If load is increased by 25% during the bottom 600 hours (shifted from other hours), SDG&E's avoided GHG emissions are equal to 0.05896652% of current emissions.
# It's somewhat surprising, but still plausible, that the GHG reduction is lower for this case than for the standard shifting case.
avoidedGHGPercentReverseShifted50LRG <- -sum(reverseShifted50LRG$Demand_Shift_kWh * reverseShifted50LRG$moer)/sum(reverseShifted50LRG$Demand_kWh * reverseShifted50LRG$moer)
# If load is increased by 50% during the bottom 600 hours (shifted from other hours), SDG&E's avoided GHG emissions are equal to 0.117933% of current emissions.
# It's somewhat surprising, but still plausible, that the GHG reduction is lower for this case than for the standard shifting case.
rm(avoidedGHGPercentReverseShifted25LRG, avoidedGHGPercentReverseShifted50LRG)
reverseShifted25LRG <- reverseShifted25LRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
reverseShifted50LRG <- reverseShifted50LRG %>%
left_join(SDGE_AL_TOU, by = "Date_Time") %>%
left_join(SDGE_AL_TOU_RTP, by = "Date_Time")
totalAnnualRevenue_AL_TOU <- sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU) # 21,016,038
totalAnnualRevenue_AL_TOU_RTP <- sum(shifted25LRG$Demand_kWh * shifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
totalAnnualRevenue_AL_TOU <- sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$Total_Energy_Rate_AL_TOU)
totalAnnualRevenue_AL_TOU_RTP <- sum(reverseShifted25LRG$Demand_kWh * reverseShifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
sum((reverseShifted50LRG$Demand_kWh + reverseShifted50LRG$Demand_Shift_kWh) * reverseShifted50LRG$Total_Energy_Rate_AL_TOU_RTP)
totalAnnualRevenue_AL_TOU_RTP_reverseShifted25 <- sum((reverseShifted25LRG$Demand_kWh + reverseShifted25LRG$Demand_Shift_kWh) * reverseShifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
# Total revenue collected with 50% reverse-load-shifting is 1,491,434 (0.03108817% lower than revenue collected without 50% reverse-load-shifting)
totalAnnualRevenue_AL_TOU_RTP_reverseShifted50 <- sum((reverseShifted50LRG$Demand_kWh + reverseShifted50LRG$Demand_Shift_kWh) * reverseShifted50LRG$Total_Energy_Rate_AL_TOU_RTP)
sum((reverseShifted25LRG$Demand_kWh + reverseShifted25LRG$Demand_Shift_kWh) * reverseShifted25LRG$Total_Energy_Rate_AL_TOU_RTP)
totalAnnualRevenue_AL_TOU_RTP_reverseShifted50
(totalAnnualRevenue_AL_TOU_RTP - totalAnnualRevenue_AL_TOU_RTP_reverseShifted25)/totalAnnualRevenue_AL_TOU_RTP
(totalAnnualRevenue_AL_TOU_RTP - totalAnnualRevenue_AL_TOU_RTP_reverseShifted50)/totalAnnualRevenue_AL_TOU_RTP
rm(totalAnnualRevenue_AL_TOU, totalAnnualRevenue_AL_TOU_RTP, totalAnnualRevenue_AL_TOU_RTP_reverseShifted25, totalAnnualRevenue_AL_TOU_RTP_reverseShifted50)
rm(reverseShifted25LRG, reverseShifted50LRG)
rm(aggLRG, SDGE_AL_TOU, SDGE_AL_TOU_RTP)
